/*
 * Copyright (C) 2015 Jorge Ruesga
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

def libraries = rootProject.ext.libraries;

android {
    defaultConfig {
        versionCode 1030
        versionName "2.4.3"

        applicationId 'com.ruesga.android.wallpapers.photophase'

        return void;
    }

    signingConfigs {
        release {
            if (rootProject.file('release.properties').exists()) {
                def Properties releaseProps = new Properties()
                releaseProps.load(new FileInputStream(rootProject.file('release.properties')))

                def Properties ksProps = new Properties()
                ksProps.load(new FileInputStream(new File((String) releaseProps['signing.config'])))
                storeFile file(ksProps['keystore'])
                keyAlias ksProps['alias']
                storePassword ksProps['storePass']
                keyPassword ksProps['pass']
                storeType ksProps['storeType']
            }

            return void;
        }
    }

    buildTypes {
        debug {
            debuggable true

            return void;
        }
        release {
            debuggable false

            zipAlignEnabled true
            shrinkResources false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')

            signingConfig signingConfigs.release

            return void;
        }
    }

    productFlavors {
        gms {
        }
        floss {
        }
    }

    lintOptions {
        disable 'MissingTranslation', 'ManifestResource'
    }

    return void;
}

dependencies {
    compile project(':native')
    compile project(':cast')
    compile "com.android.support:design:${libraries.support}"
    compile "com.android.support:cardview-v7:${libraries.support}"
    compile "com.android.support:exifinterface:${libraries.support}"
    compile "com.github.danielnilsson9:color-picker-view:${libraries.colorpickerview}"
    compile ("org.adw.library:discrete-seekbar:${libraries.discrete_seekbar}") { transitive = false }
    compile ("com.github.chrisbanes:PhotoView:${libraries.photoview}") { transitive = false }
    compile "com.squareup.okhttp3:okhttp:${libraries.okhttp3}"
    compile "com.squareup.okio:okio:${libraries.okio}"
    compile "com.mikepenz:aboutlibraries:${libraries.aboutlibraries}"

    // Chromecast
    gmsCompile project(':gms')
    flossCompile project(':floss')
    compile ("com.github.jruesga:chromecast-java-api-v2:${libraries.chromecast}") { transitive = false }
    compile ("com.google.protobuf:protobuf-java:${libraries.protobuf}") { transitive = false }
    compile ("org.codehaus.jackson:jackson-core-asl:${libraries.jackson}") { transitive = false }
    compile ("org.codehaus.jackson:jackson-mapper-asl:${libraries.jackson}") { transitive = false }
    compile "org.nanohttpd:nanohttpd:${libraries.nanohttpd}"
}

apply plugin: 'com.getkeepsafe.dexcount'
